// g++ Promesa.cpp Titulo.cpp DiccT.h DiccOrd2.h Wolfie.cpp main.cpp -o main
//./main

#include <iostream>
#include "Modulos-CPP/aed2/TiposBasicos.h"
#include "Modulos-CPP/aed2/Arreglo.h"
#include "Modulos-CPP/aed2/Vector.h"
#include "Modulos-CPP/aed2/Conj.h"

using namespace std;
using namespace aed2;

template<class S>
struct DiccT {

public:

    struct Elem;
    struct const_Elem;

    class Iterador;
    class const_Iterador;

    DiccT();
    //DiccT(const DiccT<S>& otro);
    //DiccT<S>& operator=(const DiccT<S>& otro);

    void Definir(const string& clave, S& significado);

    bool Definido(const string& clave) const;
    const S& Significado(const string& clave) const;
    S& Significado(const string& clave);
    bool operator == (DiccT<S>) const;
    Iterador CrearIt();
    const_Iterador CrearIt() const;



        class Iterador
    {
      public:

        Iterador();

        Iterador(const typename DiccT<S>::Iterador& otro);

        Iterador& operator = (const typename DiccT<S>::Iterador& otro);

        bool operator == (const typename DiccT<S>::Iterador&) const;

        bool HaySiguiente() const;
        const string& SiguienteClave() const;
        S& SiguienteSignificado();
        Elem Siguiente();
        void Avanzar();

      private:


        typename Arreglo<Elem>::Iterador it_elementos;
        Nat _i;
        Nat _long;

        Iterador(DiccT<S>* d);

        friend typename DiccT<S>::Iterador DiccT<S>::CrearIt();
        friend class DiccT<S>::const_Iterador;
    };

    class const_Iterador
    {
      public:

        const_Iterador();

        const_Iterador(const typename DiccT<S>::Iterador& otro);

        const_Iterador(const typename DiccT<S>::const_Iterador& otro);

        const_Iterador& operator = (const typename DiccT<S>::const_Iterador& otro);

        bool operator==(const typename DiccT<S>::const_Iterador&) const;

        bool HaySiguiente() const;
        const string& SiguienteClave() const;
        const S& SiguienteSignificado() const;
        const_Elem Siguiente() const;
        void Avanzar();

    private:

        typename Arreglo<Elem>::Iterador it_elementos;
        Nat _i;
        Nat _long;

        const_Iterador(const DiccT<S>* d);

        friend typename DiccT<S>::const_Iterador DiccT<S>::CrearIt() const;

     };

  private:

   struct Nodo {


       Nodo():Definido(false),significado(NULL){
            arPunteros = Arreglo<Nodo*>(256);
            for(Nat i=0;i<256;i++) {
                arPunteros.Definir(i,NULL);
            }
		};

        bool SonIguales(const DiccT<S>::Nodo n2);

        Arreglo<Nodo*> arPunteros;// = new Vector<Nodo*>();
        bool Definido;
        S* significado;

    };



    Arreglo<Nodo*> _primAr;
    Conj<string> _claves;
};

//-----------------------Auxiliares--------------------------

template<class S>
bool DiccT<S>::Nodo::SonIguales(const DiccT<S>::Nodo n2){return true;}

//-----------------------FinAux------------------------------

template<class S>
DiccT<S>::DiccT() {
    _claves=Conj<string> ();
    _primAr= Arreglo<Nodo*> (256);
    for(Nat i=0;i<256;i++) {
        _primAr.Definir(i,NULL);
    }
}

//PRE: longitud C > 0
template<class S>
void DiccT<S>::Definir(const string& c, S& s) {
    int i = 0;
    int longC = c.length();
    Nodo* nodAux;

    ///inicializo arrAux con el primer arreglo (por referencia, si no se rompe)
    Arreglo<Nodo*>* arrAux = &_primAr;
    while (i < longC){
        Nat caracterActual = c[i];
        ///si en la posición correspondiente había un NULL, tengo que crear arreglo nuevo
        if ((*arrAux)[caracterActual]==NULL){
            Nodo* nodoNuevo = new Nodo;
            (*arrAux).Definir(caracterActual, nodoNuevo);
        }
        ///reasigno arrAux para seguir iterando
        nodAux = (*arrAux)[caracterActual];
        arrAux = &(nodAux->arPunteros);
        i++;
    }
    (*nodAux).Definido = true;
    (*nodAux).significado = &s;


    //Finalmente agrego la clave en el conjunto de claves
}

template<class S>
bool DiccT<S>::Definido(const string& c) const {
    int i = 0;
    int longC = c.length();
    Nodo nodAux;

    ///inicializo arrAux con el primer arreglo
    Arreglo<Nodo*> arrAux = _primAr;
    while (i < longC){
        int caracterActual = c[i];

        ///si en la posición correspondiente había un NULL, no estaba definido!
        if (arrAux[caracterActual] == NULL){
            //fuerzo la salida del ciclo
            return false;
        }

        ///reasigno arrAux para seguir iterando
        nodAux = *arrAux[caracterActual];
        arrAux = nodAux.arPunteros;
        i++;
    }

    return true;
}


//PRE: Está definido
template<class S>
S& DiccT<S>::Significado(const string& c) {
    int i = 0;
    int longC = c.length();
    Nodo nodAux;

    //inicializo arrAux con el primer arreglo
    Arreglo<Nodo*> arrAux = _primAr;
    while (i < longC){
        int caracterActual = c[i];

        //reasigno arrAux para seguir iterando
        nodAux = *arrAux[caracterActual];
        arrAux = nodAux.arPunteros; ///Es O(256)=O(1)
        i++;
    }

    return *nodAux.significado;
}

template<class S>
bool DiccT<S>::operator == (const DiccT<S> d2) const{

	if (_claves != d2._claves) {return false;}
	int i = 0;
	while (i < 256){

		if((_primAr[i]==NULL) != (d2._primAr[i]==NULL)) 			{return false;}

		else{

			if(_primAr[i]!= NULL) {

				if (*(_primAr[i]).SonIguales(*(d2._primAr[i])) == false)  {return false;}

				}

		}

	}

	return true;

}

template<class S>
DiccT<S>::Iterador::Iterador(){
    ///TO DO
}

template<class S>
DiccT<S>::Iterador::Iterador(const typename DiccT<S>::Iterador& otro)
{}


template<class S>
bool DiccT<S>::Iterador::HaySiguiente() const{
    return true;
}

template<class S>
const string& DiccT<S>::Iterador::SiguienteClave() const{
    return "asd";
}

template<class S>
S& DiccT<S>::Iterador::SiguienteSignificado(){
    return "asd";
}

template<class S>
typename DiccT<S>::Elem DiccT<S>::Iterador::Siguiente(){
    ///TO DO
}

template<class S>
void DiccT<S>::Iterador::Avanzar(){
    ///TO DO
}

